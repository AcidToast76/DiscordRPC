{"version":3,"sources":["client.js"],"names":["EventEmitter","require","setTimeout","clearTimeout","fetch","transports","RPCCommands","RPCEvents","RelationshipTypes","getPid","pid","uuid","subKey","event","args","JSON","stringify","RPCClient","options","accessToken","clientId","application","user","Transport","transport","TypeError","method","path","data","query","endpoint","URLSearchParams","body","headers","Authorization","then","r","json","ok","e","Error","status","on","_onRpcMessage","bind","_expecting","Map","_connectPromise","undefined","Promise","resolve","reject","timeout","unref","once","forEach","emit","connect","scopes","authorize","authenticate","cmd","evt","nonce","send","set","message","DISPATCH","READY","has","get","code","clientSecret","rpcToken","redirectUri","prompt","client_id","client_secret","rpc_token","request","grant_type","redirect_uri","response","access_token","id","GET_GUILD","guild_id","GET_GUILDS","GET_CHANNEL","channel_id","GET_CHANNELS","channels","devices","SET_CERTIFIED_DEVICES","map","d","type","vendor","model","related","echo_cancellation","echoCancellation","noise_suppression","noiseSuppression","automatic_gain_control","automaticGainControl","hardware_mute","hardwareMute","settings","SET_USER_VOICE_SETTINGS","user_id","pan","mute","volume","force","SELECT_VOICE_CHANNEL","SELECT_TEXT_CHANNEL","GET_VOICE_SETTINGS","s","qos","silenceWarning","silence_warning","deaf","input","availableDevices","available_devices","device","device_id","output","mode","autoThreshold","auto_threshold","threshold","shortcut","delay","SET_VOICE_SETTINGS","callback","subid","CAPTURE_SHORTCUT_CHANGE","stop","_subscriptions","CAPTURE_SHORTCUT","action","timestamps","assets","party","secrets","startTimestamp","endTimestamp","start","end","Date","Math","round","getTime","RangeError","largeImageKey","largeImageText","smallImageKey","smallImageText","large_image","large_text","small_image","small_text","partySize","partyId","partyMax","size","matchSecret","joinSecret","spectateSecret","match","join","spectate","SET_ACTIVITY","activity","state","details","buttons","instance","SEND_ACTIVITY_JOIN_INVITE","SEND_ACTIVITY_JOIN_REQUEST","CLOSE_ACTIVITY_JOIN_REQUEST","capacity","metadata","CREATE_LOBBY","lobby","owner","UPDATE_LOBBY","owner_id","DELETE_LOBBY","secret","CONNECT_TO_LOBBY","SEND_TO_LOBBY","DISCONNECT_FROM_LOBBY","UPDATE_LOBBY_MEMBER","lobby_id","types","Object","keys","GET_RELATIONSHIPS","o","relationships","SUBSCRIBE","unsubscribe","UNSUBSCRIBE","close","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst { setTimeout, clearTimeout } = require('timers');\nconst fetch = require('node-fetch');\nconst transports = require('./transports');\nconst { RPCCommands, RPCEvents, RelationshipTypes } = require('./constants');\nconst { pid: getPid, uuid } = require('./util');\n\nfunction subKey(event, args) {\n  return `${event}${JSON.stringify(args)}`;\n}\n\n/**\n * @typedef {RPCClientOptions}\n * @extends {ClientOptions}\n * @prop {string} transport RPC transport. one of `ipc` or `websocket`\n */\n\n/**\n * The main hub for interacting with Discord RPC\n * @extends {BaseClient}\n */\nclass RPCClient extends EventEmitter {\n  /**\n   * @param {RPCClientOptions} [options] Options for the client.\n   * You must provide a transport\n   */\n  constructor(options = {}) {\n    super();\n\n    this.options = options;\n\n    this.accessToken = null;\n    this.clientId = null;\n\n    /**\n     * Application used in this client\n     * @type {?ClientApplication}\n     */\n    this.application = null;\n\n    /**\n     * User used in this application\n     * @type {?User}\n     */\n    this.user = null;\n\n    const Transport = transports[options.transport];\n    if (!Transport) {\n      throw new TypeError('RPC_INVALID_TRANSPORT', options.transport);\n    }\n\n    this.fetch = (method, path, { data, query } = {}) =>\n      fetch(`${this.fetch.endpoint}${path}${query ? new URLSearchParams(query) : ''}`, {\n        method,\n        body: data,\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`,\n        },\n      }).then(async (r) => {\n        const body = await r.json();\n        if (!r.ok) {\n          const e = new Error(r.status);\n          e.body = body;\n          throw e;\n        }\n        return body;\n      });\n\n    this.fetch.endpoint = 'https://discord.com/api';\n\n    /**\n     * Raw transport userd\n     * @type {RPCTransport}\n     * @private\n     */\n    this.transport = new Transport(this);\n    this.transport.on('message', this._onRpcMessage.bind(this));\n\n    /**\n     * Map of nonces being expected from the transport\n     * @type {Map}\n     * @private\n     */\n    this._expecting = new Map();\n\n    this._connectPromise = undefined;\n  }\n\n  /**\n   * Search and connect to RPC\n   */\n  connect(clientId) {\n    if (this._connectPromise) {\n      return this._connectPromise;\n    }\n    this._connectPromise = new Promise((resolve, reject) => {\n      this.clientId = clientId;\n      const timeout = setTimeout(() => reject(new Error('RPC_CONNECTION_TIMEOUT')), 20e3);\n      timeout.unref();\n      this.once('connected', () => {\n        clearTimeout(timeout);\n        resolve(this);\n      });\n      this.transport.once('close', () => {\n        this._expecting.forEach((e) => {\n          e.reject(new Error('connection closed'));\n        });\n        this.emit('disconnected');\n        reject(new Error('connection closed'));\n      });\n      this.transport.connect().catch(reject);\n    });\n    return this._connectPromise;\n  }\n\n  /**\n   * @typedef {RPCLoginOptions}\n   * @param {string} clientId Client ID\n   * @param {string} [clientSecret] Client secret\n   * @param {string} [accessToken] Access token\n   * @param {string} [rpcToken] RPC token\n   * @param {string} [tokenEndpoint] Token endpoint\n   * @param {string[]} [scopes] Scopes to authorize with\n   */\n\n  /**\n   * Performs authentication flow. Automatically calls Client#connect if needed.\n   * @param {RPCLoginOptions} options Options for authentication.\n   * At least one property must be provided to perform login.\n   * @example client.login({ clientId: '1234567', clientSecret: 'abcdef123' });\n   * @returns {Promise<RPCClient>}\n   */\n  async login(options = {}) {\n    let { clientId, accessToken } = options;\n    await this.connect(clientId);\n    if (!options.scopes) {\n      this.emit('ready');\n      return this;\n    }\n    if (!accessToken) {\n      accessToken = await this.authorize(options);\n    }\n    return this.authenticate(accessToken);\n  }\n\n  /**\n   * Request\n   * @param {string} cmd Command\n   * @param {Object} [args={}] Arguments\n   * @param {string} [evt] Event\n   * @returns {Promise}\n   * @private\n   */\n  request(cmd, args, evt) {\n    return new Promise((resolve, reject) => {\n      const nonce = uuid();\n      this.transport.send({ cmd, args, evt, nonce });\n      this._expecting.set(nonce, { resolve, reject });\n    });\n  }\n\n  /**\n   * Message handler\n   * @param {Object} message message\n   * @private\n   */\n  _onRpcMessage(message) {\n    if (message.cmd === RPCCommands.DISPATCH && message.evt === RPCEvents.READY) {\n      if (message.data.user) {\n        this.user = message.data.user;\n      }\n      this.emit('connected');\n    } else if (this._expecting.has(message.nonce)) {\n      const { resolve, reject } = this._expecting.get(message.nonce);\n      if (message.evt === 'ERROR') {\n        const e = new Error(message.data.message);\n        e.code = message.data.code;\n        e.data = message.data;\n        reject(e);\n      } else {\n        resolve(message.data);\n      }\n      this._expecting.delete(message.nonce);\n    } else {\n      this.emit(message.evt, message.data);\n    }\n  }\n\n  /**\n   * Authorize\n   * @param {Object} options options\n   * @returns {Promise}\n   * @private\n   */\n  async authorize({ scopes, clientSecret, rpcToken, redirectUri, prompt } = {}) {\n    if (clientSecret && rpcToken === true) {\n      const body = await this.fetch('POST', '/oauth2/token/rpc', {\n        data: new URLSearchParams({\n          client_id: this.clientId,\n          client_secret: clientSecret,\n        }),\n      });\n      rpcToken = body.rpc_token;\n    }\n\n    const { code } = await this.request('AUTHORIZE', {\n      scopes,\n      client_id: this.clientId,\n      prompt,\n      rpc_token: rpcToken,\n    });\n\n    const response = await this.fetch('POST', '/oauth2/token', {\n      data: new URLSearchParams({\n        client_id: this.clientId,\n        client_secret: clientSecret,\n        code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      }),\n    });\n\n    return response.access_token;\n  }\n\n  /**\n   * Authenticate\n   * @param {string} accessToken access token\n   * @returns {Promise}\n   * @private\n   */\n  authenticate(accessToken) {\n    return this.request('AUTHENTICATE', { access_token: accessToken })\n      .then(({ application, user }) => {\n        this.accessToken = accessToken;\n        this.application = application;\n        this.user = user;\n        this.emit('ready');\n        return this;\n      });\n  }\n\n\n  /**\n   * Fetch a guild\n   * @param {Snowflake} id Guild ID\n   * @param {number} [timeout] Timeout request\n   * @returns {Promise<Guild>}\n   */\n  getGuild(id, timeout) {\n    return this.request(RPCCommands.GET_GUILD, { guild_id: id, timeout });\n  }\n\n  /**\n   * Fetch all guilds\n   * @param {number} [timeout] Timeout request\n   * @returns {Promise<Collection<Snowflake, Guild>>}\n   */\n  getGuilds(timeout) {\n    return this.request(RPCCommands.GET_GUILDS, { timeout });\n  }\n\n  /**\n   * Get a channel\n   * @param {Snowflake} id Channel ID\n   * @param {number} [timeout] Timeout request\n   * @returns {Promise<Channel>}\n   */\n  getChannel(id, timeout) {\n    return this.request(RPCCommands.GET_CHANNEL, { channel_id: id, timeout });\n  }\n\n  /**\n   * Get all channels\n   * @param {Snowflake} [id] Guild ID\n   * @param {number} [timeout] Timeout request\n   * @returns {Promise<Collection<Snowflake, Channel>>}\n   */\n  async getChannels(id, timeout) {\n    const { channels } = await this.request(RPCCommands.GET_CHANNELS, {\n      timeout,\n      guild_id: id,\n    });\n    return channels;\n  }\n\n  /**\n   * @typedef {CertifiedDevice}\n   * @prop {string} type One of `AUDIO_INPUT`, `AUDIO_OUTPUT`, `VIDEO_INPUT`\n   * @prop {string} uuid This device's Windows UUID\n   * @prop {object} vendor Vendor information\n   * @prop {string} vendor.name Vendor's name\n   * @prop {string} vendor.url Vendor's url\n   * @prop {object} model Model information\n   * @prop {string} model.name Model's name\n   * @prop {string} model.url Model's url\n   * @prop {string[]} related Array of related product's Windows UUIDs\n   * @prop {boolean} echoCancellation If the device has echo cancellation\n   * @prop {boolean} noiseSuppression If the device has noise suppression\n   * @prop {boolean} automaticGainControl If the device has automatic gain control\n   * @prop {boolean} hardwareMute If the device has a hardware mute\n   */\n\n  /**\n   * Tell discord which devices are certified\n   * @param {CertifiedDevice[]} devices Certified devices to send to discord\n   * @returns {Promise}\n   */\n  setCertifiedDevices(devices) {\n    return this.request(RPCCommands.SET_CERTIFIED_DEVICES, {\n      devices: devices.map((d) => ({\n        type: d.type,\n        id: d.uuid,\n        vendor: d.vendor,\n        model: d.model,\n        related: d.related,\n        echo_cancellation: d.echoCancellation,\n        noise_suppression: d.noiseSuppression,\n        automatic_gain_control: d.automaticGainControl,\n        hardware_mute: d.hardwareMute,\n      })),\n    });\n  }\n\n  /**\n   * @typedef {UserVoiceSettings}\n   * @prop {Snowflake} id ID of the user these settings apply to\n   * @prop {?Object} [pan] Pan settings, an object with `left` and `right` set between\n   * 0.0 and 1.0, inclusive\n   * @prop {?number} [volume=100] The volume\n   * @prop {bool} [mute] If the user is muted\n   */\n\n  /**\n   * Set the voice settings for a user, by id\n   * @param {Snowflake} id ID of the user to set\n   * @param {UserVoiceSettings} settings Settings\n   * @returns {Promise}\n   */\n  setUserVoiceSettings(id, settings) {\n    return this.request(RPCCommands.SET_USER_VOICE_SETTINGS, {\n      user_id: id,\n      pan: settings.pan,\n      mute: settings.mute,\n      volume: settings.volume,\n    });\n  }\n\n  /**\n   * Move the user to a voice channel\n   * @param {Snowflake} id ID of the voice channel\n   * @param {Object} [options] Options\n   * @param {number} [options.timeout] Timeout for the command\n   * @param {boolean} [options.force] Force this move. This should only be done if you\n   * have explicit permission from the user.\n   * @returns {Promise}\n   */\n  selectVoiceChannel(id, { timeout, force = false } = {}) {\n    return this.request(RPCCommands.SELECT_VOICE_CHANNEL, { channel_id: id, timeout, force });\n  }\n\n  /**\n   * Move the user to a text channel\n   * @param {Snowflake} id ID of the voice channel\n   * @param {Object} [options] Options\n   * @param {number} [options.timeout] Timeout for the command\n   * have explicit permission from the user.\n   * @returns {Promise}\n   */\n  selectTextChannel(id, { timeout } = {}) {\n    return this.request(RPCCommands.SELECT_TEXT_CHANNEL, { channel_id: id, timeout });\n  }\n\n  /**\n   * Get current voice settings\n   * @returns {Promise}\n   */\n  getVoiceSettings() {\n    return this.request(RPCCommands.GET_VOICE_SETTINGS)\n      .then((s) => ({\n        automaticGainControl: s.automatic_gain_control,\n        echoCancellation: s.echo_cancellation,\n        noiseSuppression: s.noise_suppression,\n        qos: s.qos,\n        silenceWarning: s.silence_warning,\n        deaf: s.deaf,\n        mute: s.mute,\n        input: {\n          availableDevices: s.input.available_devices,\n          device: s.input.device_id,\n          volume: s.input.volume,\n        },\n        output: {\n          availableDevices: s.output.available_devices,\n          device: s.output.device_id,\n          volume: s.output.volume,\n        },\n        mode: {\n          type: s.mode.type,\n          autoThreshold: s.mode.auto_threshold,\n          threshold: s.mode.threshold,\n          shortcut: s.mode.shortcut,\n          delay: s.mode.delay,\n        },\n      }));\n  }\n\n  /**\n   * Set current voice settings, overriding the current settings until this session disconnects.\n   * This also locks the settings for any other rpc sessions which may be connected.\n   * @param {Object} args Settings\n   * @returns {Promise}\n   */\n  setVoiceSettings(args) {\n    return this.request(RPCCommands.SET_VOICE_SETTINGS, {\n      automatic_gain_control: args.automaticGainControl,\n      echo_cancellation: args.echoCancellation,\n      noise_suppression: args.noiseSuppression,\n      qos: args.qos,\n      silence_warning: args.silenceWarning,\n      deaf: args.deaf,\n      mute: args.mute,\n      input: args.input ? {\n        device_id: args.input.device,\n        volume: args.input.volume,\n      } : undefined,\n      output: args.output ? {\n        device_id: args.output.device,\n        volume: args.output.volume,\n      } : undefined,\n      mode: args.mode ? {\n        type: args.mode.type,\n        auto_threshold: args.mode.autoThreshold,\n        threshold: args.mode.threshold,\n        shortcut: args.mode.shortcut,\n        delay: args.mode.delay,\n      } : undefined,\n    });\n  }\n\n  /**\n   * Capture a shortcut using the client\n   * The callback takes (key, stop) where `stop` is a function that will stop capturing.\n   * This `stop` function must be called before disconnecting or else the user will have\n   * to restart their client.\n   * @param {Function} callback Callback handling keys\n   * @returns {Promise<Function>}\n   */\n  captureShortcut(callback) {\n    const subid = subKey(RPCEvents.CAPTURE_SHORTCUT_CHANGE);\n    const stop = () => {\n      this._subscriptions.delete(subid);\n      return this.request(RPCCommands.CAPTURE_SHORTCUT, { action: 'STOP' });\n    };\n    this._subscriptions.set(subid, ({ shortcut }) => {\n      callback(shortcut, stop);\n    });\n    return this.request(RPCCommands.CAPTURE_SHORTCUT, { action: 'START' })\n      .then(() => stop);\n  }\n\n  /**\n   * Sets the presence for the logged in user.\n   * @param {object} args The rich presence to pass.\n   * @param {number} [pid] The application's process ID. Defaults to the executing process' PID.\n   * @returns {Promise}\n   */\n  setActivity(args = {}, pid = getPid()) {\n    let timestamps;\n    let assets;\n    let party;\n    let secrets;\n    if (args.startTimestamp || args.endTimestamp) {\n      timestamps = {\n        start: args.startTimestamp,\n        end: args.endTimestamp,\n      };\n      if (timestamps.start instanceof Date) {\n        timestamps.start = Math.round(timestamps.start.getTime());\n      }\n      if (timestamps.end instanceof Date) {\n        timestamps.end = Math.round(timestamps.end.getTime());\n      }\n      if (timestamps.start > 2147483647000) {\n        throw new RangeError('timestamps.start must fit into a unix timestamp');\n      }\n      if (timestamps.end > 2147483647000) {\n        throw new RangeError('timestamps.end must fit into a unix timestamp');\n      }\n    }\n    if (\n      args.largeImageKey || args.largeImageText\n      || args.smallImageKey || args.smallImageText\n    ) {\n      assets = {\n        large_image: args.largeImageKey,\n        large_text: args.largeImageText,\n        small_image: args.smallImageKey,\n        small_text: args.smallImageText,\n      };\n    }\n    if (args.partySize || args.partyId || args.partyMax) {\n      party = { id: args.partyId };\n      if (args.partySize || args.partyMax) {\n        party.size = [args.partySize, args.partyMax];\n      }\n    }\n    if (args.matchSecret || args.joinSecret || args.spectateSecret) {\n      secrets = {\n        match: args.matchSecret,\n        join: args.joinSecret,\n        spectate: args.spectateSecret,\n      };\n    }\n\n    return this.request(RPCCommands.SET_ACTIVITY, {\n      pid,\n      activity: {\n        state: args.state,\n        details: args.details,\n        timestamps,\n        assets,\n        party,\n        secrets,\n        buttons: args.buttons,\n        instance: !!args.instance,\n      },\n    });\n  }\n\n  /**\n   * Clears the currently set presence, if any. This will hide the \"Playing X\" message\n   * displayed below the user's name.\n   * @param {number} [pid] The application's process ID. Defaults to the executing process' PID.\n   * @returns {Promise}\n   */\n  clearActivity(pid = getPid()) {\n    return this.request(RPCCommands.SET_ACTIVITY, {\n      pid,\n    });\n  }\n\n  /**\n   * Invite a user to join the game the RPC user is currently playing\n   * @param {User} user The user to invite\n   * @returns {Promise}\n   */\n  sendJoinInvite(user) {\n    return this.request(RPCCommands.SEND_ACTIVITY_JOIN_INVITE, {\n      user_id: user.id || user,\n    });\n  }\n\n  /**\n   * Request to join the game the user is playing\n   * @param {User} user The user whose game you want to request to join\n   * @returns {Promise}\n   */\n  sendJoinRequest(user) {\n    return this.request(RPCCommands.SEND_ACTIVITY_JOIN_REQUEST, {\n      user_id: user.id || user,\n    });\n  }\n\n  /**\n   * Reject a join request from a user\n   * @param {User} user The user whose request you wish to reject\n   * @returns {Promise}\n   */\n  closeJoinRequest(user) {\n    return this.request(RPCCommands.CLOSE_ACTIVITY_JOIN_REQUEST, {\n      user_id: user.id || user,\n    });\n  }\n\n  createLobby(type, capacity, metadata) {\n    return this.request(RPCCommands.CREATE_LOBBY, {\n      type,\n      capacity,\n      metadata,\n    });\n  }\n\n  updateLobby(lobby, { type, owner, capacity, metadata } = {}) {\n    return this.request(RPCCommands.UPDATE_LOBBY, {\n      id: lobby.id || lobby,\n      type,\n      owner_id: (owner && owner.id) || owner,\n      capacity,\n      metadata,\n    });\n  }\n\n  deleteLobby(lobby) {\n    return this.request(RPCCommands.DELETE_LOBBY, {\n      id: lobby.id || lobby,\n    });\n  }\n\n  connectToLobby(id, secret) {\n    return this.request(RPCCommands.CONNECT_TO_LOBBY, {\n      id,\n      secret,\n    });\n  }\n\n  sendToLobby(lobby, data) {\n    return this.request(RPCCommands.SEND_TO_LOBBY, {\n      id: lobby.id || lobby,\n      data,\n    });\n  }\n\n  disconnectFromLobby(lobby) {\n    return this.request(RPCCommands.DISCONNECT_FROM_LOBBY, {\n      id: lobby.id || lobby,\n    });\n  }\n\n  updateLobbyMember(lobby, user, metadata) {\n    return this.request(RPCCommands.UPDATE_LOBBY_MEMBER, {\n      lobby_id: lobby.id || lobby,\n      user_id: user.id || user,\n      metadata,\n    });\n  }\n\n  getRelationships() {\n    const types = Object.keys(RelationshipTypes);\n    return this.request(RPCCommands.GET_RELATIONSHIPS)\n      .then((o) => o.relationships.map((r) => ({\n        ...r,\n        type: types[r.type],\n      })));\n  }\n\n  /**\n   * Subscribe to an event\n   * @param {string} event Name of event e.g. `MESSAGE_CREATE`\n   * @param {Object} [args] Args for event e.g. `{ channel_id: '1234' }`\n   * @returns {Promise<Object>}\n   */\n  async subscribe(event, args) {\n    await this.request(RPCCommands.SUBSCRIBE, args, event);\n    return {\n      unsubscribe: () => this.request(RPCCommands.UNSUBSCRIBE, args, event),\n    };\n  }\n\n  /**\n   * Destroy the client\n   */\n  async destroy() {\n    await this.transport.close();\n  }\n}\n\nmodule.exports = RPCClient;\n"],"file":"client.dev.js"}