{"version":3,"sources":["app.js"],"names":["clientId","DiscordRPC","require","Client","transport","spotifyrpc","url","fetch","then","res","json","spotifyRPC","register","setActivity","regeneratorRuntime","async","_context2","prev","next","RPC","abrupt","details","state","largeImageKey","console","smallImageText","instance","buttons","label","stop","setSpotifyRPC","_context3","largeImageText","smallImageKey","fetchCurrentlyPlayingTrack","response","data","_context5","awrap","sent","ok","Error","trackName","item","name","artistName","artists","map","artist","join","trackUrl","external_urls","spotify","accessToken","on","_context4","setInterval","_context7","updateDiscordRPCWithSpotify","login","err","error"],"mappings":"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","file":"app.min.js","sourcesContent":["const clientId = \"1254145695762485248\";\r\nconst DiscordRPC = require(\"discord-rpc\");\r\nconst RPC = new DiscordRPC.Client({ transport: \"ipc\" });\r\n\r\n\r\nDiscordRPC.register(clientId);\r\n\r\nasync function spotifyrpc (url) {\r\n   let spotifyRPC = await fetch(\"https://spotify.thefemdevs.com/playing/nezha\").then(res => res.json())\r\n   console.log(spotifyRPC)\r\n}\r\n\r\nspotifyrpc()\r\n\r\nasync function setActivity() {\r\n    if (!RPC) {\r\n        return;\r\n    }\r\n    \r\n    RPC.setActivity({\r\n        details: \"Playing a game\",\r\n        state: \"In the menu\",\r\n        largeImageKey: \"large\",\r\n        largeImageText: \"Large Image\",\r\n        smallImageKey: \"small\",\r\n        smallImageText: \"Small Image\",\r\n        instance: false,\r\n        buttons: [\r\n            { \r\n                label: \"Website\", url: \"https://nezha.thefemdevs.com\" \r\n            },\r\n            { \r\n                label: \"Spotify\", url: \"https://open.spotify.com/user/hpjv09y99ucx7adf3jb6qijvp?si=40ac1fa71e7d44ee\" \r\n            }\r\n        ]\r\n    });\r\n}\r\n\r\nasync function setSpotifyRPC() {\r\n    if (!RPC) {\r\n        return;\r\n    }\r\n    \r\n    RPC.setActivity({\r\n        details: \"Listening to Spotify\",\r\n        state: \"Warframe Bops\",\r\n        largeImageKey: \"large\",\r\n        largeImageText: \"Large Image\",\r\n        smallImageKey: \"small\",\r\n        smallImageText: \"Small Image\",\r\n        instance: false,\r\n        buttons: [\r\n            { \r\n                label: \"Website\", url: \"https://nezha.thefemdevs.com\" \r\n            },\r\n            { \r\n                label: \"Spotify\", url: \"https://open.spotify.com/user/hpjv09y99ucx7adf3jb6qijvp?si=40ac1fa71e7d44ee\" \r\n            }\r\n        ]\r\n    });\r\n\r\n}\r\n\r\nRPC.on(\"ready\", async () => {\r\n    setActivity();\r\n    setInterval(() => {\r\n        setActivity();\r\n    }, 15e3);\r\n});\r\n\r\n\r\n// Function to fetch the currently playing track from Spotify\r\nasync function fetchCurrentlyPlayingTrack() {\r\n    const response = await fetch(\"https://spotify.thefemdevs.com/playing/nezha\", {\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch currently playing track\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return {\r\n        trackName: data.item.name,\r\n        artistName: data.item.artists.map(artist => artist.name).join(\", \"),\r\n        trackUrl: data.item.external_urls.spotify,\r\n    };\r\n}\r\n\r\n// Function to update Discord RPC with Spotify track information\r\nasync function updateDiscordRPCWithSpotify() {\r\n    try {\r\n        const { trackName, artistName, trackUrl } = await fetchCurrentlyPlayingTrack(accessToken);\r\n\r\n        RPC.setActivity({\r\n            details: `Listening to ${trackName}`,\r\n            state: `by ${artistName}`,\r\n            largeImageKey: \"spotify\",\r\n            buttons: [{ label: \"Listen on Spotify\", url: trackUrl }]\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Failed to update Discord RPC with Spotify:\", error);\r\n    }\r\n}\r\n\r\n// Example usage\r\nRPC.on(\"ready\", async () => {\r\n    updateDiscordRPCWithSpotify();\r\n    setInterval(updateDiscordRPCWithSpotify, 15e3); // Update every 15 seconds\r\n});\r\n\r\nRPC.login({ clientId }).catch(err => console.error(err));\r\n\r\nsetSpotifyRPC()"]}