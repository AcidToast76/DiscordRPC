{"version":3,"sources":["app.js"],"names":["clientId","DiscordRPC","require","RPC","Client","transport","register","spotifyrpc","url","fetch","then","res","json","spotifyRPC","console","log","setActivity","details","state","largeImageKey","largeImageText","smallImageKey","smallImageText","instance","buttons","label","setSpotifyRPC","on","setInterval","fetchCurrentlyPlayingTrack","response","ok","Error","data","trackName","item","name","artistName","artists","map","artist","join","trackUrl","external_urls","spotify","updateDiscordRPCWithSpotify","accessToken","error","login","err"],"mappings":"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","sourcesContent":["const clientId = \"1254145695762485248\";\r\nconst DiscordRPC = require(\"discord-rpc\");\r\nconst RPC = new DiscordRPC.Client({ transport: \"ipc\" });\r\n\r\n\r\nDiscordRPC.register(clientId);\r\n\r\nasync function spotifyrpc (url) {\r\n   let spotifyRPC = await fetch(\"https://spotify.thefemdevs.com/playing/nezha\").then(res => res.json())\r\n   console.log(spotifyRPC)\r\n}\r\n\r\nspotifyrpc()\r\n\r\nasync function setActivity() {\r\n    if (!RPC) {\r\n        return;\r\n    }\r\n    \r\n    RPC.setActivity({\r\n        details: \"Playing a game\",\r\n        state: \"In the menu\",\r\n        largeImageKey: \"large\",\r\n        largeImageText: \"Large Image\",\r\n        smallImageKey: \"small\",\r\n        smallImageText: \"Small Image\",\r\n        instance: false,\r\n        buttons: [\r\n            { \r\n                label: \"Website\", url: \"https://nezha.thefemdevs.com\" \r\n            },\r\n            { \r\n                label: \"Spotify\", url: \"https://open.spotify.com/user/hpjv09y99ucx7adf3jb6qijvp?si=40ac1fa71e7d44ee\" \r\n            }\r\n        ]\r\n    });\r\n}\r\n\r\nasync function setSpotifyRPC() {\r\n    if (!RPC) {\r\n        return;\r\n    }\r\n    \r\n    RPC.setActivity({\r\n        details: \"Listening to Spotify\",\r\n        state: \"Warframe Bops\",\r\n        largeImageKey: \"large\",\r\n        largeImageText: \"Large Image\",\r\n        smallImageKey: \"small\",\r\n        smallImageText: \"Small Image\",\r\n        instance: false,\r\n        buttons: [\r\n            { \r\n                label: \"Website\", url: \"https://nezha.thefemdevs.com\" \r\n            },\r\n            { \r\n                label: \"Spotify\", url: \"https://open.spotify.com/user/hpjv09y99ucx7adf3jb6qijvp?si=40ac1fa71e7d44ee\" \r\n            }\r\n        ]\r\n    });\r\n\r\n}\r\n\r\nRPC.on(\"ready\", async () => {\r\n    setActivity();\r\n    setInterval(() => {\r\n        setActivity();\r\n    }, 15e3);\r\n});\r\n\r\n\r\n// Function to fetch the currently playing track from Spotify\r\nasync function fetchCurrentlyPlayingTrack() {\r\n    const response = await fetch(\"https://spotify.thefemdevs.com/playing/nezha\", {\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch currently playing track\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return {\r\n        trackName: data.item.name,\r\n        artistName: data.item.artists.map(artist => artist.name).join(\", \"),\r\n        trackUrl: data.item.external_urls.spotify,\r\n    };\r\n}\r\n\r\n// Function to update Discord RPC with Spotify track information\r\nasync function updateDiscordRPCWithSpotify() {\r\n    try {\r\n        const { trackName, artistName, trackUrl } = await fetchCurrentlyPlayingTrack(accessToken);\r\n\r\n        RPC.setActivity({\r\n            details: `Listening to ${trackName}`,\r\n            state: `by ${artistName}`,\r\n            largeImageKey: \"spotify\",\r\n            buttons: [{ label: \"Listen on Spotify\", url: trackUrl }]\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Failed to update Discord RPC with Spotify:\", error);\r\n    }\r\n}\r\n\r\n// Example usage\r\nRPC.on(\"ready\", async () => {\r\n    updateDiscordRPCWithSpotify();\r\n    setInterval(updateDiscordRPCWithSpotify, 15e3); // Update every 15 seconds\r\n});\r\n\r\nRPC.login({ clientId }).catch(err => console.error(err));"],"file":"app.dev.js"}