{"version":3,"sources":["app.js"],"names":["clientId","DiscordRPC","require","RPC","Client","transport","register","setActivity","fetch","then","res","json","spotifyRPC","console","dir","song","title","name","artists","album","url","state","details","largeImageKey","largeImageText","smallImageKey","smallImageText","instance","buttons","label","on","setInterval","fetchCurrentlyPlayingTrack","response","ok","Error","data","trackName","item","artistName","map","artist","join","trackUrl","external_urls","spotify","updateDiscordRPCWithSpotify","accessToken","error","login","err"],"mappings":"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","sourcesContent":["const clientId = \"1254145695762485248\";\r\nconst DiscordRPC = require(\"discord-rpc\");\r\nconst RPC = new DiscordRPC.Client({ transport: \"ipc\" });\r\n\r\n\r\nDiscordRPC.register(clientId);\r\n\r\nasync function setActivity() {\r\n    let spotifyRPC = await fetch(\"https://spotify.thefemdevs.com/playing/nezha\").then(res => res.json());\r\n    console.dir(spotifyRPC);\r\n    if (!RPC) {\r\n        return;\r\n    }\r\n    const { name: title, artists, album, url } = spotifyRPC.song\r\n    \r\n    RPC.setActivity({\r\n        state: \"Listening To:\",\r\n        details: title, \" by \": artists, \" on \": album,\r\n        largeImageKey: \"large\",\r\n        largeImageText: \"Large Image\",\r\n        smallImageKey: \"small\",\r\n        smallImageText: \"Small Image\",\r\n        instance: false,\r\n        buttons: [\r\n            { \r\n                label: \"Website\", url: \"https://nezha.thefemdevs.com\" \r\n            },\r\n            { \r\n                label: \"Spotify\", url: \"https://open.spotify.com/user/hpjv09y99ucx7adf3jb6qijvp?si=40ac1fa71e7d44ee\" \r\n            },\r\n            {\r\n                label: \"Song\", url: url\r\n            }\r\n        ]\r\n    });\r\n}\r\n\r\nRPC.on(\"ready\", async () => {\r\n    setActivity();\r\n    setInterval(() => {\r\n        setActivity();\r\n    }, 15e3);\r\n});\r\n\r\n\r\n// Function to fetch the currently playing track from Spotify\r\nasync function fetchCurrentlyPlayingTrack() {\r\n    const response = await fetch(\"https://spotify.thefemdevs.com/playing/nezha\", {\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch currently playing track\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return {\r\n        trackName: data.item.name,\r\n        artistName: data.item.artists.map(artist => artist.name).join(\", \"),\r\n        trackUrl: data.item.external_urls.spotify,\r\n    };\r\n}\r\n\r\n// Function to update Discord RPC with Spotify track information\r\nasync function updateDiscordRPCWithSpotify() {\r\n    try {\r\n        const { trackName, artistName, trackUrl } = await fetchCurrentlyPlayingTrack(accessToken);\r\n\r\n        RPC.setActivity({\r\n            details: `Listening to ${trackName}`,\r\n            state: `by ${artistName}`,\r\n            largeImageKey: \"spotify\",\r\n            buttons: [{ label: \"Listen on Spotify\", url: trackUrl }]\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Failed to update Discord RPC with Spotify:\", error);\r\n    }\r\n}\r\n\r\n// Example usage\r\nRPC.on(\"ready\", async () => {\r\n    updateDiscordRPCWithSpotify();\r\n    setInterval(updateDiscordRPCWithSpotify, 15e3); // Update every 15 seconds\r\n});\r\n\r\nRPC.login({ clientId }).catch(err => console.error(err));\r\n\r\nsetActivity();"],"file":"app.dev.js"}